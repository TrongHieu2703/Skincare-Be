// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Skincare.Repositories.Context;

#nullable disable

namespace Skincare.Repositories.Migrations
{
    [DbContext(typeof(SWP391Context))]
    [Migration("20250225174738_AddRefreshAndOtpProps")]
    partial class AddRefreshAndOtpProps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("active")
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK__Account__3213E83F89716693");

                    b.HasIndex(new[] { "Email" }, "IDX_Account_Email");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__BlogCate__3213E83F415408F9");

                    b.ToTable("BlogCategory", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("blog_category_id");

                    b.Property<int>("BlogOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("blog_owner_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Img")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit")
                        .HasColumnName("is_visible");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__BlogPost__3213E83F6081F938");

                    b.HasIndex("BlogCategoryId");

                    b.HasIndex("BlogOwnerId");

                    b.ToTable("BlogPost", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Branch__3213E83F40BE3547");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime?>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__51BCD797D46A884E");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "UserId", "ProductId" }, "IDX_Cart_User_Product");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.CustomerTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("int")
                        .HasColumnName("total_score");

                    b.HasKey("Id")
                        .HasName("PK__Customer__3213E83F480F9F77");

                    b.HasIndex("CustomerId");

                    b.HasIndex("QuizId");

                    b.ToTable("CustomerTest", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit")
                        .HasColumnName("is_visible");

                    b.Property<DateTime?>("LastUpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.HasKey("Id")
                        .HasName("PK__QA__3213E83FBE7D644F");

                    b.ToTable("FAQ", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("branch_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PK__Inventor__3213E83F73F583EA");

                    b.HasIndex("BranchId");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventory", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("discount_price");

                    b.Property<bool>("IsPrepaid")
                        .HasColumnType("bit")
                        .HasColumnName("is_prepaid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("voucher_id");

                    b.HasKey("Id")
                        .HasName("PK__Order__3213E83FE3EEA8D5");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VoucherId");

                    b.HasIndex(new[] { "Id" }, "IDX_Order_User");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemQuantity")
                        .HasColumnType("int")
                        .HasColumnName("item_quantity");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("PK__OrderIte__3213E83F9126E5AE");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("is_available");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int")
                        .HasColumnName("product_brand_id");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("product_type_id");

                    b.HasKey("Id")
                        .HasName("PK__Product__3213E83FBCB48056");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex(new[] { "ProductTypeId" }, "IDX_Product_Type");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.ProductSkinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("SkinTypeId")
                        .HasColumnType("int")
                        .HasColumnName("skin_type_id");

                    b.HasKey("Id")
                        .HasName("PK__ProductS__3213E83F77DB3203");

                    b.HasIndex("ProductId");

                    b.HasIndex("SkinTypeId");

                    b.ToTable("ProductSkinType", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__ProductT__3213E83F7D8FC195");

                    b.ToTable("ProductType", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK__Quiz__3213E83FA27FC890");

                    b.ToTable("Quiz", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.QuizAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("PK__QuizAnsw__3213E83F137A9186");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizAnswer", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int")
                        .HasColumnName("order_detail_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Id")
                        .HasName("PK__Review__3213E83F3B286EF6");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.SkinCareRoutine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("RoutineSteps")
                        .HasColumnType("text")
                        .HasColumnName("routine_steps");

                    b.Property<int>("SkinTypeId")
                        .HasColumnType("int")
                        .HasColumnName("skin_type_id");

                    b.HasKey("Id")
                        .HasName("PK__SkinCare__3213E83F99D7DE21");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SkinTypeId");

                    b.ToTable("SkinCareRoutine", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.SkinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("PK__SkinType__3213E83FC7A4317D");

                    b.ToTable("SkinType", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A4B984B0262");

                    b.HasIndex("OrderId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expired_at");

                    b.Property<bool?>("IsInfinity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_infinity");

                    b.Property<bool>("IsPercent")
                        .HasColumnType("bit")
                        .HasColumnName("is_percent");

                    b.Property<decimal?>("MaxDiscountValue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("max_discount_value");

                    b.Property<decimal?>("MinOrderValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("min_order_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("PointCost")
                        .HasColumnType("int")
                        .HasColumnName("point_cost");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("started_at");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PK__Voucher__3213E83F1AFC68AB");

                    b.HasIndex(new[] { "Code" }, "UQ__Voucher__357D4CF95DB16CD3")
                        .IsUnique();

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.BlogPost", b =>
                {
                    b.HasOne("Skincare.BusinessObjects.Entities.BlogCategory", "BlogCategory")
                        .WithMany("BlogPosts")
                        .HasForeignKey("BlogCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__BlogPost__blog_c__6E01572D");

                    b.HasOne("Skincare.BusinessObjects.Entities.Account", "BlogOwner")
                        .WithMany("BlogPosts")
                        .HasForeignKey("BlogOwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__BlogPost__blog_o__6D0D32F4");

                    b.Navigation("BlogCategory");

                    b.Navigation("BlogOwner");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Cart", b =>
                {
                    b.HasOne("Skincare.BusinessObjects.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Cart__ProductID__1AD3FDA4");

                    b.HasOne("Skincare.BusinessObjects.Entities.Account", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Cart__UserID__19DFD96B");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.CustomerTest", b =>
                {
                    b.HasOne("Skincare.BusinessObjects.Entities.Account", "Customer")
                        .WithMany("CustomerTests")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerT__custo__76969D2E");

                    b.HasOne("Skincare.BusinessObjects.Entities.Quiz", "Quiz")
                        .WithMany("CustomerTests")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CustomerTest_Quiz");

                    b.Navigation("Customer");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Inventory", b =>
                {
                    b.HasOne("Skincare.BusinessObjects.Entities.Branch", "Branch")
                        .WithMany("Inventories")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK__Inventory__branc__52593CB8");

                    b.HasOne("Skincare.BusinessObjects.Entities.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__Inventory__produ__5165187F");

                    b.Navigation("Branch");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Order", b =>
                {
                    b.HasOne("Skincare.BusinessObjects.Entities.Account", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__customer___5BE2A6F2");

                    b.HasOne("Skincare.BusinessObjects.Entities.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("FK__Order__voucher_i__5CD6CB2B");

                    b.Navigation("Customer");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.OrderItem", b =>
                {
                    b.HasOne("Skincare.BusinessObjects.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderItem__order__60A75C0F");

                    b.HasOne("Skincare.BusinessObjects.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderItem__produ__619B8048");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Product", b =>
                {
                    b.HasOne("Skincare.BusinessObjects.Entities.Branch", "ProductBrand")
                        .WithMany("Products")
                        .HasForeignKey("ProductBrandId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__product__4D94879B");

                    b.HasOne("Skincare.BusinessObjects.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__product__4CA06362");

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.ProductSkinType", b =>
                {
                    b.HasOne("Skincare.BusinessObjects.Entities.Product", "Product")
                        .WithMany("ProductSkinTypes")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductSk__produ__48CFD27E");

                    b.HasOne("Skincare.BusinessObjects.Entities.SkinType", "SkinType")
                        .WithMany("ProductSkinTypes")
                        .HasForeignKey("SkinTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductSk__skin___49C3F6B7");

                    b.Navigation("Product");

                    b.Navigation("SkinType");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.QuizAnswer", b =>
                {
                    b.HasOne("Skincare.BusinessObjects.Entities.Quiz", "Quiz")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("FK__QuizAnswe__quiz___7D439ABD");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Review", b =>
                {
                    b.HasOne("Skincare.BusinessObjects.Entities.Account", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__customer__6754599E");

                    b.HasOne("Skincare.BusinessObjects.Entities.OrderItem", "OrderDetail")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderDetailId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__order_de__66603565");

                    b.Navigation("Customer");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.SkinCareRoutine", b =>
                {
                    b.HasOne("Skincare.BusinessObjects.Entities.Account", "Customer")
                        .WithMany("SkinCareRoutines")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__SkinCareR__custo__01142BA1");

                    b.HasOne("Skincare.BusinessObjects.Entities.SkinType", "SkinType")
                        .WithMany("SkinCareRoutines")
                        .HasForeignKey("SkinTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__SkinCareR__skin___02084FDA");

                    b.Navigation("Customer");

                    b.Navigation("SkinType");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Transaction", b =>
                {
                    b.HasOne("Skincare.BusinessObjects.Entities.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Transacti__Order__1F98B2C1");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Account", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("Carts");

                    b.Navigation("CustomerTests");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("SkinCareRoutines");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.BlogCategory", b =>
                {
                    b.Navigation("BlogPosts");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Branch", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.OrderItem", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Inventories");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductSkinTypes");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Quiz", b =>
                {
                    b.Navigation("CustomerTests");

                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.SkinType", b =>
                {
                    b.Navigation("ProductSkinTypes");

                    b.Navigation("SkinCareRoutines");
                });

            modelBuilder.Entity("Skincare.BusinessObjects.Entities.Voucher", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
